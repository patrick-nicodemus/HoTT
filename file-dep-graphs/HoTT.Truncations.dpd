N: 24 "BuildIsSurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 67 "ConditionallyConstant" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 72 "FixedBy" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 10 "O_eq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 9 "O_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 13 "O_leq_Tr_leq" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 7 "O_lex_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 8 "O_strong_leq_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 48 "Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 43 "Trunc_functor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 39 "Trunc_functor_compose" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 40 "Trunc_functor_equiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 38 "Trunc_functor_idmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 41 "Trunc_functor_isequiv" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 1 "Trunc_ind" [body=yes, kind=cnst, prop=no, path="Core.Trunc", ];
N: 12 "Trunc_min" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 50 "Trunc_rec" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 49 "Trunc_rec_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 11 "Trunc_swap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 15 "ap_paths_inverse" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 21 "cancelR_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 66 "cconst_const" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 63 "cconst_factors_contr" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 64 "cconst_factors_hprop" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 62 "cconst_wconst_collapsible" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 59 "cconst_wconst_hset" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 56 "cconst_wconst_hset_if_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 60 "cconst_wconst_hset_if_merely_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 68 "collapsible_splitsupp" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 92 "conn_point_elim" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 93 "conn_point_incl" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 94 "conn_pointed_type" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 19 "contr_hfiber_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 26 "contr_inhab_prop" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 31 "contr_tr_minus_two" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 37 "equiv_Trunc_prod_cmp" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 65 "equiv_cconst_from_merely" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 81 "equiv_component_image_unit" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 70 "equiv_fix_merely" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 22 "equiv_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 54 "equiv_merely_rec_hset_if_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 5 "equiv_path_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 45 "equiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 29 "hexists" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 27 "himage" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 28 "hor" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 61 "hprop_image_wconst_hset_if_merely_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 23 "iff_merely_issurjection" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 35 "inO_tr_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 80 "indecomposable_0connected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 83 "is0connected_component" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 87 "is0connected_isconnected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 84 "is0connected_merely_allpath" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 42 "is0functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 36 "is1functor_Tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 78 "isconn_wedge_incl" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 95 "isconnected_paths" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 91 "isconnected_pred" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 90 "isconnected_pred_add" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 89 "isconnected_pred_add'" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 79 "isconnected_trunc" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 86 "isconnmap_pred_add" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 14 "isembedding_paths" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 16 "isembedding_precompose_surjection_hset" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 17 "isequiv_isequiv_compose_embedding" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 18 "isequiv_surj_emb" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 46 "isequiv_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 71 "ishprop_fix_wconst" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 20 "issurj_retr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 96 "istrunc_extension_along_conn" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 34 "istrunc_inO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 2 "istrunc_truncation" [body=no, kind=cnst, prop=no, path="Core.Trunc", ];
N: 32 "istruncmap_mapinO_tr" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 33 "mapinO_tr_istruncmap" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 30 "merely" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 25 "merely_inhabited_iff_inhabited_stable" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 88 "merely_isconnected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 82 "merely_path_component" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 85 "merely_path_is0connected" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 58 "merely_rec_hset" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 57 "merely_rec_hset_beta" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 55 "merely_rec_hset_if_domain" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 6 "path_Tr" [body=yes, kind=cnst, prop=no, path="SeparatedTrunc", ];
N: 69 "splitsupp_collapsible" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 52 "surjective_factor" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 53 "surjective_factor_aux" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 51 "surjective_factor_factors" [body=yes, kind=cnst, prop=no, path="Constant", ];
N: 47 "trunc_iff_isequiv_truncation" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 44 "untrunc_istrunc" [body=yes, kind=cnst, prop=no, path="Core", ];
N: 76 "wedge_incl_comp1" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 75 "wedge_incl_comp2" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 74 "wedge_incl_comp3" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 77 "wedge_incl_elim" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 73 "wedge_incl_elim_uncurried" [body=yes, kind=cnst, prop=no, path="Connectedness", ];
N: 4 "Trunc" [kind=inductive, prop=no, path="Core.Trunc", ];
N: 3 "tr" [kind=construct, prop=no, path="Core.Trunc", ];
E: 1 3 [weight=2, ];
E: 1 4 [weight=9, ];
E: 2 4 [weight=1, ];
E: 5 3 [weight=2, ];
E: 5 7 [weight=1, ];
E: 5 8 [weight=1, ];
E: 5 10 [weight=1, ];
E: 5 48 [weight=4, ];
E: 6 3 [weight=2, ];
E: 6 10 [weight=1, ];
E: 6 48 [weight=4, ];
E: 7 8 [weight=3, ];
E: 7 34 [weight=6, ];
E: 7 48 [weight=20, ];
E: 7 50 [weight=4, ];
E: 8 9 [weight=1, ];
E: 8 48 [weight=6, ];
E: 9 34 [weight=1, ];
E: 9 35 [weight=1, ];
E: 9 48 [weight=5, ];
E: 10 34 [weight=2, ];
E: 10 35 [weight=1, ];
E: 10 48 [weight=11, ];
E: 11 12 [weight=2, ];
E: 11 48 [weight=17, ];
E: 12 2 [weight=1, ];
E: 12 3 [weight=3, ];
E: 12 4 [weight=4, ];
E: 12 13 [weight=1, ];
E: 12 43 [weight=1, ];
E: 12 45 [weight=1, ];
E: 12 48 [weight=20, ];
E: 13 48 [weight=4, ];
E: 14 15 [weight=7, ];
E: 14 17 [weight=1, ];
E: 14 48 [weight=5, ];
E: 16 35 [weight=1, ];
E: 16 48 [weight=3, ];
E: 17 18 [weight=1, ];
E: 17 21 [weight=1, ];
E: 17 48 [weight=1, ];
E: 18 48 [weight=3, ];
E: 20 2 [weight=1, ];
E: 20 3 [weight=1, ];
E: 20 48 [weight=3, ];
E: 21 2 [weight=1, ];
E: 21 43 [weight=1, ];
E: 21 48 [weight=6, ];
E: 22 2 [weight=1, ];
E: 22 23 [weight=1, ];
E: 22 30 [weight=3, ];
E: 22 48 [weight=3, ];
E: 23 2 [weight=1, ];
E: 23 30 [weight=4, ];
E: 23 48 [weight=7, ];
E: 24 2 [weight=1, ];
E: 24 30 [weight=2, ];
E: 24 48 [weight=3, ];
E: 25 1 [weight=1, ];
E: 25 3 [weight=1, ];
E: 25 4 [weight=3, ];
E: 25 48 [weight=3, ];
E: 26 2 [weight=1, ];
E: 26 30 [weight=3, ];
E: 26 35 [weight=1, ];
E: 26 48 [weight=1, ];
E: 27 48 [weight=3, ];
E: 28 30 [weight=1, ];
E: 29 30 [weight=1, ];
E: 30 2 [weight=1, ];
E: 30 48 [weight=1, ];
E: 31 34 [weight=1, ];
E: 31 35 [weight=4, ];
E: 31 48 [weight=20, ];
E: 32 48 [weight=2, ];
E: 33 48 [weight=1, ];
E: 34 48 [weight=2, ];
E: 35 48 [weight=1, ];
E: 36 38 [weight=1, ];
E: 36 39 [weight=1, ];
E: 36 42 [weight=2, ];
E: 36 48 [weight=3, ];
E: 37 48 [weight=4, ];
E: 38 43 [weight=1, ];
E: 38 48 [weight=5, ];
E: 39 43 [weight=3, ];
E: 39 48 [weight=9, ];
E: 40 48 [weight=3, ];
E: 41 43 [weight=1, ];
E: 41 48 [weight=3, ];
E: 42 43 [weight=1, ];
E: 42 48 [weight=2, ];
E: 43 48 [weight=3, ];
E: 44 46 [weight=1, ];
E: 44 48 [weight=1, ];
E: 45 3 [weight=1, ];
E: 45 4 [weight=1, ];
E: 45 46 [weight=1, ];
E: 45 48 [weight=1, ];
E: 46 3 [weight=1, ];
E: 46 4 [weight=1, ];
E: 46 47 [weight=1, ];
E: 47 3 [weight=1, ];
E: 47 4 [weight=1, ];
E: 47 48 [weight=1, ];
E: 48 1 [weight=2, ];
E: 48 2 [weight=1, ];
E: 48 3 [weight=10, ];
E: 48 4 [weight=24, ];
E: 49 1 [weight=1, ];
E: 49 2 [weight=5, ];
E: 49 3 [weight=5, ];
E: 49 4 [weight=16, ];
E: 49 50 [weight=4, ];
E: 50 1 [weight=1, ];
E: 50 4 [weight=3, ];
E: 51 3 [weight=2, ];
E: 51 4 [weight=2, ];
E: 51 30 [weight=1, ];
E: 51 48 [weight=6, ];
E: 51 52 [weight=3, ];
E: 51 53 [weight=1, ];
E: 52 30 [weight=1, ];
E: 52 48 [weight=4, ];
E: 52 53 [weight=1, ];
E: 53 30 [weight=1, ];
E: 53 58 [weight=1, ];
E: 54 1 [weight=1, ];
E: 54 2 [weight=18, ];
E: 54 3 [weight=94, ];
E: 54 4 [weight=32, ];
E: 54 30 [weight=45, ];
E: 54 50 [weight=13, ];
E: 54 55 [weight=17, ];
E: 54 61 [weight=6, ];
E: 55 30 [weight=1, ];
E: 55 56 [weight=1, ];
E: 56 50 [weight=1, ];
E: 56 60 [weight=1, ];
E: 56 67 [weight=1, ];
E: 57 3 [weight=2, ];
E: 57 58 [weight=2, ];
E: 58 30 [weight=1, ];
E: 58 59 [weight=1, ];
E: 59 30 [weight=1, ];
E: 59 60 [weight=1, ];
E: 59 67 [weight=1, ];
E: 60 30 [weight=2, ];
E: 60 48 [weight=10, ];
E: 60 61 [weight=1, ];
E: 60 64 [weight=1, ];
E: 60 67 [weight=1, ];
E: 61 1 [weight=4, ];
E: 61 2 [weight=3, ];
E: 61 3 [weight=1, ];
E: 61 4 [weight=8, ];
E: 61 30 [weight=4, ];
E: 61 48 [weight=11, ];
E: 62 3 [weight=3, ];
E: 62 4 [weight=2, ];
E: 62 30 [weight=1, ];
E: 62 67 [weight=1, ];
E: 62 69 [weight=2, ];
E: 62 70 [weight=1, ];
E: 63 1 [weight=1, ];
E: 63 3 [weight=1, ];
E: 63 4 [weight=3, ];
E: 63 30 [weight=4, ];
E: 63 50 [weight=1, ];
E: 63 67 [weight=1, ];
E: 64 3 [weight=1, ];
E: 64 4 [weight=2, ];
E: 64 30 [weight=3, ];
E: 64 50 [weight=1, ];
E: 64 67 [weight=1, ];
E: 65 3 [weight=8, ];
E: 65 4 [weight=22, ];
E: 65 30 [weight=2, ];
E: 65 67 [weight=1, ];
E: 66 3 [weight=1, ];
E: 66 4 [weight=3, ];
E: 66 67 [weight=1, ];
E: 67 3 [weight=1, ];
E: 67 4 [weight=2, ];
E: 68 2 [weight=1, ];
E: 68 3 [weight=6, ];
E: 68 30 [weight=6, ];
E: 69 30 [weight=3, ];
E: 69 70 [weight=1, ];
E: 69 72 [weight=2, ];
E: 70 2 [weight=1, ];
E: 70 3 [weight=1, ];
E: 70 30 [weight=2, ];
E: 70 50 [weight=1, ];
E: 70 71 [weight=2, ];
E: 70 72 [weight=4, ];
E: 71 72 [weight=5, ];
E: 73 48 [weight=4, ];
E: 73 77 [weight=1, ];
E: 74 48 [weight=4, ];
E: 74 75 [weight=1, ];
E: 74 76 [weight=1, ];
E: 74 77 [weight=2, ];
E: 74 78 [weight=1, ];
E: 75 48 [weight=4, ];
E: 75 77 [weight=1, ];
E: 75 78 [weight=1, ];
E: 76 48 [weight=4, ];
E: 76 77 [weight=1, ];
E: 76 78 [weight=1, ];
E: 77 48 [weight=4, ];
E: 77 78 [weight=1, ];
E: 78 48 [weight=5, ];
E: 78 93 [weight=2, ];
E: 78 96 [weight=1, ];
E: 79 11 [weight=1, ];
E: 79 48 [weight=19, ];
E: 80 1 [weight=5, ];
E: 80 4 [weight=10, ];
E: 80 30 [weight=6, ];
E: 80 48 [weight=5, ];
E: 80 50 [weight=2, ];
E: 80 85 [weight=2, ];
E: 80 91 [weight=1, ];
E: 81 30 [weight=3, ];
E: 81 40 [weight=1, ];
E: 81 48 [weight=31, ];
E: 82 1 [weight=2, ];
E: 82 2 [weight=3, ];
E: 82 3 [weight=9, ];
E: 82 4 [weight=4, ];
E: 82 30 [weight=30, ];
E: 83 1 [weight=2, ];
E: 83 2 [weight=3, ];
E: 83 3 [weight=17, ];
E: 83 4 [weight=10, ];
E: 83 30 [weight=35, ];
E: 83 48 [weight=1, ];
E: 84 1 [weight=3, ];
E: 84 2 [weight=2, ];
E: 84 3 [weight=3, ];
E: 84 4 [weight=5, ];
E: 84 5 [weight=1, ];
E: 84 30 [weight=4, ];
E: 84 48 [weight=13, ];
E: 85 30 [weight=2, ];
E: 85 48 [weight=3, ];
E: 85 95 [weight=1, ];
E: 86 48 [weight=5, ];
E: 86 90 [weight=1, ];
E: 87 48 [weight=3, ];
E: 87 89 [weight=1, ];
E: 88 30 [weight=1, ];
E: 88 48 [weight=3, ];
E: 88 89 [weight=1, ];
E: 89 48 [weight=4, ];
E: 89 90 [weight=1, ];
E: 90 48 [weight=9, ];
E: 90 91 [weight=1, ];
E: 91 34 [weight=1, ];
E: 91 35 [weight=1, ];
E: 91 48 [weight=6, ];
E: 92 1 [weight=1, ];
E: 92 4 [weight=2, ];
E: 92 48 [weight=5, ];
E: 92 95 [weight=1, ];
E: 93 7 [weight=1, ];
E: 93 8 [weight=1, ];
E: 93 48 [weight=8, ];
E: 94 9 [weight=1, ];
E: 94 10 [weight=1, ];
E: 94 48 [weight=8, ];
E: 95 3 [weight=6, ];
E: 95 5 [weight=1, ];
E: 95 48 [weight=9, ];
E: 96 35 [weight=2, ];
E: 96 48 [weight=5, ];
