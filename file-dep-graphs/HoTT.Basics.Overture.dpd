N: 20 "Asymmetric" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 99 "Compose" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 28 "Empty_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 27 "Empty_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 26 "Empty_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 59 "Funext" [body=no, kind=cnst, prop=no, path="Overture", ];
N: 22 "Irreflexive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 13 "IsPointed" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 47 "IsTrunc_internal_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 46 "IsTrunc_internal_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 45 "IsTrunc_internal_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 44 "IsTrunc_unfolded" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 110 "PreOrder_Reflexive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 109 "PreOrder_Transitive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 2 "PropResizing" [body=no, kind=cnst, prop=no, path="Overture", ];
N: 118 "Reflexive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 119 "Relation" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 116 "Symmetric" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 114 "Transitive" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 16 "Unit_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 15 "Unit_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 14 "Unit_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 80 "ap" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 72 "ap10" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 60 "ap10_equiv" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 71 "ap11" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 79 "apD" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 73 "apD10" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 19 "asymmetry" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 39 "center" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 23 "complement" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 98 "composeD" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 87 "concat" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 108 "const" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 38 "contr" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 83 "define_internal_paths_rew" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 81 "define_internal_paths_rew_r" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 65 "eisadj" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 67 "eisretr" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 66 "eissect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 62 "equiv_fun" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 68 "equiv_inv" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 61 "equiv_isequiv" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 41 "equiv_istrunc_unfold" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 3 "equiv_smalltype" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 123 "fst" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 7 "hfiber" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 84 "internal_paths_rew" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 82 "internal_paths_rew_r" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 89 "inverse" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 21 "irreflexivity" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 58 "isequiv_apD10" [body=no, kind=cnst, prop=no, path="Overture", ];
N: 42 "isequiv_istrunc_unfold" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 8 "ispointed_type" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 1 "issmall_hprop" [body=no, kind=cnst, prop=no, path="Overture", ];
N: 37 "istrunc_codomain_fam" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 36 "istrunc_fun" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 40 "istrunc_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 43 "istrunc_unfold" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 32 "nat_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 30 "nat_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 31 "nat_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 25 "not" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 131 "option_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 57 "path_forall" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 95 "paths_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 91 "paths_ind'" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 90 "paths_ind_r" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 94 "paths_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 93 "paths_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 12 "point" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 9 "pointed_type" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 78 "pointwise_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 77 "pointwise_paths_concat" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 120 "prod_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 121 "prod_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 105 "proj1" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 104 "proj2" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 92 "reflexive_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 76 "reflexive_pointwise_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 117 "reflexivity" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 102 "sig_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 101 "sig_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 103 "sig_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 4 "smalltype" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 122 "snd" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 126 "sum_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 127 "sum_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 24 "symmetric_neq" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 88 "symmetric_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 74 "symmetric_pointwise_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 115 "symmetry" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 86 "transitive_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 75 "transitive_pointwise_paths" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 113 "transitivity" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 85 "transport" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 53 "trunc_index_ind" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 52 "trunc_index_rec" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 51 "trunc_index_rect" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 100 "uncurry" [body=yes, kind=cnst, prop=no, path="Overture", ];
N: 29 "Empty" [kind=inductive, prop=no, path="Overture", ];
N: 64 "Equiv" [kind=inductive, prop=no, path="Overture", ];
N: 70 "IsEquiv" [kind=inductive, prop=no, path="Overture", ];
N: 6 "IsSmall" [kind=inductive, prop=no, path="Overture", ];
N: 50 "IsTrunc_internal" [kind=inductive, prop=no, path="Overture", ];
N: 112 "PreOrder" [kind=inductive, prop=no, path="Overture", ];
N: 18 "Unit" [kind=inductive, prop=no, path="Overture", ];
N: 35 "nat" [kind=inductive, prop=no, path="Overture", ];
N: 134 "option" [kind=inductive, prop=no, path="Overture", ];
N: 11 "pType" [kind=inductive, prop=no, path="Overture", ];
N: 97 "paths" [kind=inductive, prop=no, path="Overture", ];
N: 125 "prod" [kind=inductive, prop=no, path="Overture", ];
N: 107 "sig" [kind=inductive, prop=no, path="Overture", ];
N: 130 "sum" [kind=inductive, prop=no, path="Overture", ];
N: 56 "trunc_index" [kind=inductive, prop=no, path="Overture", ];
N: 63 "Build_Equiv" [kind=construct, prop=no, path="Overture", ];
N: 69 "Build_IsEquiv" [kind=construct, prop=no, path="Overture", ];
N: 5 "Build_IsSmall" [kind=construct, prop=no, path="Overture", ];
N: 49 "Build_Contr" [kind=construct, prop=no, path="Overture", ];
N: 111 "Build_PreOrder" [kind=construct, prop=no, path="Overture", ];
N: 17 "tt" [kind=construct, prop=no, path="Overture", ];
N: 34 "O" [kind=construct, prop=no, path="Overture", ];
N: 133 "Some" [kind=construct, prop=no, path="Overture", ];
N: 10 "Build_pType" [kind=construct, prop=no, path="Overture", ];
N: 96 "idpath" [kind=construct, prop=no, path="Overture", ];
N: 124 "pair" [kind=construct, prop=no, path="Overture", ];
N: 106 "exist" [kind=construct, prop=no, path="Overture", ];
N: 129 "inl" [kind=construct, prop=no, path="Overture", ];
N: 55 "minus_two" [kind=construct, prop=no, path="Overture", ];
N: 48 "istrunc_S" [kind=construct, prop=no, path="Overture", ];
N: 33 "S" [kind=construct, prop=no, path="Overture", ];
N: 132 "None" [kind=construct, prop=no, path="Overture", ];
N: 128 "inr" [kind=construct, prop=no, path="Overture", ];
N: 54 "trunc_S" [kind=construct, prop=no, path="Overture", ];
E: 1 2 [weight=1, ];
E: 1 6 [weight=1, ];
E: 1 50 [weight=1, ];
E: 1 54 [weight=1, ];
E: 1 55 [weight=1, ];
E: 3 6 [weight=2, ];
E: 3 64 [weight=1, ];
E: 4 6 [weight=2, ];
E: 5 64 [weight=1, ];
E: 6 64 [weight=1, ];
E: 7 97 [weight=1, ];
E: 7 107 [weight=1, ];
E: 8 11 [weight=2, ];
E: 8 13 [weight=1, ];
E: 9 11 [weight=2, ];
E: 10 13 [weight=1, ];
E: 11 13 [weight=1, ];
E: 12 13 [weight=2, ];
E: 14 16 [weight=1, ];
E: 14 17 [weight=1, ];
E: 14 18 [weight=2, ];
E: 15 18 [weight=3, ];
E: 16 17 [weight=2, ];
E: 16 18 [weight=5, ];
E: 19 20 [weight=2, ];
E: 19 23 [weight=1, ];
E: 19 119 [weight=2, ];
E: 20 23 [weight=1, ];
E: 20 119 [weight=2, ];
E: 21 22 [weight=2, ];
E: 21 23 [weight=1, ];
E: 21 118 [weight=1, ];
E: 21 119 [weight=2, ];
E: 22 23 [weight=1, ];
E: 22 118 [weight=1, ];
E: 22 119 [weight=2, ];
E: 23 25 [weight=1, ];
E: 23 119 [weight=3, ];
E: 24 25 [weight=3, ];
E: 24 89 [weight=1, ];
E: 24 97 [weight=4, ];
E: 25 29 [weight=1, ];
E: 26 28 [weight=1, ];
E: 26 29 [weight=2, ];
E: 27 29 [weight=3, ];
E: 28 29 [weight=5, ];
E: 30 33 [weight=2, ];
E: 30 34 [weight=2, ];
E: 30 35 [weight=8, ];
E: 31 33 [weight=2, ];
E: 31 34 [weight=2, ];
E: 31 35 [weight=8, ];
E: 32 33 [weight=2, ];
E: 32 34 [weight=2, ];
E: 32 35 [weight=8, ];
E: 36 37 [weight=2, ];
E: 36 38 [weight=1, ];
E: 36 43 [weight=1, ];
E: 36 50 [weight=5, ];
E: 36 54 [weight=2, ];
E: 36 55 [weight=1, ];
E: 36 56 [weight=4, ];
E: 37 39 [weight=1, ];
E: 37 50 [weight=6, ];
E: 37 54 [weight=1, ];
E: 37 55 [weight=1, ];
E: 37 56 [weight=4, ];
E: 37 97 [weight=2, ];
E: 38 39 [weight=1, ];
E: 38 43 [weight=1, ];
E: 38 50 [weight=2, ];
E: 38 55 [weight=3, ];
E: 38 97 [weight=1, ];
E: 39 43 [weight=1, ];
E: 39 50 [weight=2, ];
E: 39 55 [weight=3, ];
E: 40 43 [weight=1, ];
E: 40 50 [weight=3, ];
E: 40 54 [weight=3, ];
E: 40 56 [weight=2, ];
E: 40 97 [weight=1, ];
E: 41 42 [weight=1, ];
E: 41 43 [weight=1, ];
E: 41 44 [weight=2, ];
E: 41 50 [weight=2, ];
E: 41 56 [weight=2, ];
E: 41 63 [weight=1, ];
E: 41 64 [weight=1, ];
E: 42 43 [weight=25, ];
E: 42 44 [weight=44, ];
E: 42 48 [weight=17, ];
E: 42 49 [weight=19, ];
E: 42 50 [weight=39, ];
E: 42 54 [weight=19, ];
E: 42 55 [weight=21, ];
E: 42 56 [weight=17, ];
E: 42 69 [weight=1, ];
E: 42 70 [weight=1, ];
E: 42 78 [weight=3, ];
E: 42 80 [weight=3, ];
E: 42 96 [weight=12, ];
E: 42 97 [weight=20, ];
E: 42 107 [weight=4, ];
E: 43 44 [weight=2, ];
E: 43 50 [weight=4, ];
E: 43 56 [weight=3, ];
E: 43 97 [weight=3, ];
E: 43 106 [weight=1, ];
E: 44 50 [weight=1, ];
E: 44 56 [weight=3, ];
E: 44 97 [weight=2, ];
E: 44 107 [weight=1, ];
E: 45 47 [weight=1, ];
E: 45 48 [weight=1, ];
E: 45 49 [weight=1, ];
E: 45 50 [weight=3, ];
E: 45 54 [weight=1, ];
E: 45 55 [weight=1, ];
E: 45 56 [weight=3, ];
E: 45 97 [weight=3, ];
E: 46 50 [weight=6, ];
E: 46 54 [weight=2, ];
E: 46 55 [weight=2, ];
E: 46 56 [weight=7, ];
E: 46 97 [weight=7, ];
E: 47 48 [weight=2, ];
E: 47 49 [weight=2, ];
E: 47 50 [weight=8, ];
E: 47 54 [weight=2, ];
E: 47 55 [weight=2, ];
E: 47 56 [weight=7, ];
E: 47 97 [weight=7, ];
E: 48 54 [weight=1, ];
E: 48 55 [weight=1, ];
E: 48 56 [weight=1, ];
E: 48 97 [weight=2, ];
E: 49 54 [weight=1, ];
E: 49 55 [weight=1, ];
E: 49 56 [weight=1, ];
E: 49 97 [weight=2, ];
E: 50 54 [weight=1, ];
E: 50 55 [weight=1, ];
E: 50 56 [weight=1, ];
E: 50 97 [weight=2, ];
E: 51 53 [weight=1, ];
E: 51 54 [weight=1, ];
E: 51 55 [weight=1, ];
E: 51 56 [weight=3, ];
E: 52 56 [weight=6, ];
E: 53 54 [weight=2, ];
E: 53 55 [weight=2, ];
E: 53 56 [weight=8, ];
E: 57 58 [weight=1, ];
E: 57 59 [weight=2, ];
E: 57 78 [weight=1, ];
E: 57 97 [weight=1, ];
E: 58 59 [weight=1, ];
E: 58 70 [weight=1, ];
E: 58 73 [weight=1, ];
E: 58 78 [weight=1, ];
E: 58 97 [weight=1, ];
E: 60 62 [weight=3, ];
E: 60 64 [weight=7, ];
E: 60 72 [weight=1, ];
E: 60 78 [weight=1, ];
E: 60 80 [weight=1, ];
E: 60 97 [weight=2, ];
E: 61 64 [weight=2, ];
E: 61 70 [weight=1, ];
E: 62 64 [weight=2, ];
E: 63 70 [weight=1, ];
E: 64 70 [weight=1, ];
E: 65 70 [weight=2, ];
E: 65 80 [weight=1, ];
E: 65 97 [weight=2, ];
E: 66 70 [weight=2, ];
E: 66 78 [weight=1, ];
E: 67 70 [weight=2, ];
E: 67 78 [weight=1, ];
E: 68 70 [weight=2, ];
E: 69 78 [weight=2, ];
E: 69 80 [weight=1, ];
E: 69 97 [weight=2, ];
E: 70 78 [weight=2, ];
E: 70 80 [weight=1, ];
E: 70 97 [weight=2, ];
E: 71 96 [weight=1, ];
E: 71 97 [weight=9, ];
E: 72 73 [weight=1, ];
E: 72 78 [weight=1, ];
E: 72 97 [weight=2, ];
E: 73 78 [weight=1, ];
E: 73 96 [weight=1, ];
E: 73 97 [weight=4, ];
E: 74 78 [weight=4, ];
E: 74 89 [weight=1, ];
E: 74 116 [weight=2, ];
E: 75 77 [weight=1, ];
E: 75 78 [weight=2, ];
E: 75 114 [weight=2, ];
E: 76 78 [weight=3, ];
E: 76 96 [weight=1, ];
E: 76 118 [weight=2, ];
E: 77 78 [weight=5, ];
E: 77 87 [weight=1, ];
E: 78 97 [weight=1, ];
E: 79 85 [weight=3, ];
E: 79 96 [weight=2, ];
E: 79 97 [weight=5, ];
E: 80 96 [weight=1, ];
E: 80 97 [weight=5, ];
E: 81 82 [weight=1, ];
E: 81 97 [weight=2, ];
E: 82 97 [weight=3, ];
E: 83 84 [weight=1, ];
E: 83 97 [weight=2, ];
E: 84 97 [weight=3, ];
E: 85 97 [weight=3, ];
E: 86 87 [weight=1, ];
E: 86 97 [weight=1, ];
E: 86 114 [weight=1, ];
E: 87 96 [weight=1, ];
E: 87 97 [weight=11, ];
E: 88 89 [weight=1, ];
E: 88 97 [weight=1, ];
E: 88 116 [weight=1, ];
E: 89 96 [weight=1, ];
E: 89 97 [weight=5, ];
E: 90 96 [weight=4, ];
E: 90 97 [weight=7, ];
E: 91 96 [weight=2, ];
E: 91 97 [weight=5, ];
E: 92 96 [weight=1, ];
E: 92 97 [weight=1, ];
E: 92 118 [weight=1, ];
E: 93 95 [weight=1, ];
E: 93 96 [weight=1, ];
E: 93 97 [weight=2, ];
E: 94 97 [weight=3, ];
E: 95 96 [weight=2, ];
E: 95 97 [weight=5, ];
E: 100 125 [weight=2, ];
E: 101 107 [weight=2, ];
E: 102 106 [weight=2, ];
E: 102 107 [weight=4, ];
E: 103 106 [weight=2, ];
E: 103 107 [weight=4, ];
E: 104 107 [weight=2, ];
E: 105 107 [weight=2, ];
E: 109 112 [weight=2, ];
E: 109 114 [weight=1, ];
E: 109 119 [weight=2, ];
E: 110 112 [weight=2, ];
E: 110 118 [weight=1, ];
E: 110 119 [weight=2, ];
E: 111 114 [weight=1, ];
E: 111 118 [weight=1, ];
E: 111 119 [weight=1, ];
E: 112 114 [weight=1, ];
E: 112 118 [weight=1, ];
E: 112 119 [weight=1, ];
E: 113 114 [weight=2, ];
E: 113 119 [weight=2, ];
E: 114 119 [weight=2, ];
E: 115 116 [weight=2, ];
E: 115 119 [weight=2, ];
E: 116 119 [weight=2, ];
E: 117 118 [weight=2, ];
E: 117 119 [weight=2, ];
E: 118 119 [weight=2, ];
E: 120 124 [weight=2, ];
E: 120 125 [weight=4, ];
E: 121 124 [weight=2, ];
E: 121 125 [weight=4, ];
E: 122 125 [weight=2, ];
E: 123 125 [weight=2, ];
E: 126 128 [weight=2, ];
E: 126 129 [weight=2, ];
E: 126 130 [weight=5, ];
E: 127 128 [weight=2, ];
E: 127 129 [weight=2, ];
E: 127 130 [weight=5, ];
E: 131 132 [weight=2, ];
E: 131 133 [weight=2, ];
E: 131 134 [weight=5, ];
